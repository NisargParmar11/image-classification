# -*- coding: utf-8 -*-
"""image classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gPHXctuycMdlH1Nj7tP-1IZ99tlnADQJ
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import datasets, layers, models
from tensorflow.keras.datasets import cifar10

# Load the CIFAR-10 dataset
(training_images, training_labels), (testing_images, testing_labels) = cifar10.load_data()

# Normalize the pixel values
training_images, testing_images = training_images / 255.0, testing_images / 255.0

# Define the class names
class_names = ['Plane', 'Car', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']

for i in range(16):
  plt.subplot(4,4,i+1)#4x4 grid
  plt.xticks([])
  plt.yticks([])
  plt.imshow(training_images[i],cmap=plt.cm.binary)
  plt.xlabel(class_names[training_labels[i][0]])
plt.show()

# Import required modules
import tensorflow as tf
from tensorflow import keras
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten

# Define the model
model = keras.Sequential()

# Add convolutional layers
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))

# Add dense layers
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(64, activation='softmax'))

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(training_images, training_labels, epochs=10, validation_data=(testing_images, testing_labels))

loss,accuracy=model.evaluate(testing_images,testing_labels)
print("Loss:",loss)
print("Accuracy:",accuracy)
model.save('image_classifier.model')

#load images from internet and classify them.
img=cv.imread('horse.jpg.circ')
img=cv.cvtColor(img,cv.COLOR_BGR2RGB)
plt.imshow(img,cmap=plt.cm.binary)
prediction=model.predict(np.array([img])/255)
index=np.argmax(prediction) #index of higher activation
print('Prediction is:' ,class_names[index])
plt.show()